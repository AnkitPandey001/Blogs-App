import React, { useState } from "react";
import { Heart, MessageCircle } from "lucide-react";
import useFetchPosts from "../hooks/useFetchPosts";
import axios from "axios";
import Suggestusr from "./Suggestusr";

const AllPost: React.FC = () => {
  const { posts: fetchedPosts, loading, error } = useFetchPosts();
  const [posts, setPosts] = useState(fetchedPosts?.posts || []);
  const currentUserId = localStorage.getItem("User");

  console.log(posts)

  React.useEffect(() => {
    if (fetchedPosts?.posts) {
      setPosts(fetchedPosts.posts);
    }
  }, [fetchedPosts]);

  const handleLikeToggle = async (postId) => {
    const token = localStorage.getItem("Token");
  
    setPosts((prevPosts) =>
      prevPosts.map((post) => {
        if (post._id === postId) {
          const isLiked = post.likes.includes(currentUserId || "");

          const updatedLikes = isLiked
            ? post.likes.filter((id) => id !== currentUserId)
            : [...post.likes, currentUserId];
  
          return { ...post, likes: updatedLikes };
        }
        return post;
      })
    );
  
    try {
      await axios.post(
        `http://localhost:8000/api/post/like/${postId}`,
        {},
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );
    } catch (error) {
      console.error("Error toggling like:", error);
    }
  };
  

  const handleFollowToggle = async (userId) => {
    const token = localStorage.getItem("Token");
  
    setPosts((prevPosts) =>
      prevPosts.map((post) => {
        if (post.user._id === userId) {
          const isFollowingUser = post.user.follower.includes(currentUserId || "");
  
          // Optimistic update for follow/unfollow
          const updatedFollowers = isFollowingUser
            ? post.user.follower.filter((id) => id !== currentUserId)
            : [...post.user.follower, currentUserId];
  
          return {
            ...post,
            user: { ...post.user, follower: updatedFollowers },
          };
        }
        return post;
      })
    );
  
    try {
      await axios.post(
        `http://localhost:8000/api/user/follow/${userId}`,
        {},
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );
    } catch (error) {
      console.error("Error toggling follow:", error);
    }
  };
  

  const isFollowing = (userFollowers: string[]): boolean => {
    return userFollowers.includes(currentUserId || "");
  };

  if (loading) return <p>Loading...</p>;
  if (error) return <p>Error loading posts</p>;

  return (
    <div className="min-h-screen bg-gray-50 p-6 pt-20 flex justify-center items-center">
      <div className="container flex flex-col lg:flex-row gap-6">
        <div className="lg:w-2/3 mb-48">
          {posts.map((post) => (
            <div
              key={post._id}
              className="bg-white p-6 mb-6 rounded-lg shadow-lg"
            >
              <div className="flex items-center mb-4">
                <img
                  src={
                    post.user.profileImg ||
                    "https://imgs.search.brave.com/guFeeYHxGB1sxa5fjRQz35X6MNFk-_AmM_fj6PNO1X0/rs:fit:860:0:0:0/g:ce/aHR0cHM6Ly9pbWcu/ZnJlZXBpay5jb20v/ZnJlZS1waG90by91/c2VyLXByb2ZpbGUt/aWNvbi1mcm9udC1z/aWRlXzE4NzI5OS0z/OTU5Ni5qcGc_c2l6/ZT02MjYmZXh0PWpw/Zw"
                  }
                  alt={post.user.fullname}
                  className="w-12 h-12 rounded-full object-cover mr-4"
                />
                <div>
                  <h2 className="text-lg font-semibold">
                    {post.user.fullname}
                  </h2>
                  <p className="text-sm text-gray-500">{post.user.email}</p>
                  <button
                    className={`bg-blue-500 text-white px-2 py-1 rounded-md hover:bg-blue-600`}
                    onClick={() => handleFollowToggle(post.user._id)}
                  >
                    {isFollowing(post.user.follower) ? "Unfollow" : "Follow"}
                  </button>
                </div>
              </div>

              <h1 className="text-2xl font-bold text-gray-800 mb-4">
                {post.title}
              </h1>
              <p className="text-gray-600 mb-4">{post.text}</p>

              <div className="bg-gray-900 rounded-lg overflow-hidden mb-4">
                <img
                  src={
                    post.imageUrl ||
                    "https://imgs.search.brave.com/guFeeYHxGB1sxa5fjRQz35X6MNFk-_AmM_fj6PNO1X0/rs:fit:860:0:0:0/g:ce/aHR0cHM6Ly9pbWcu/ZnJlZXBpay5jb20v/ZnJlZS1waG90by91/c2VyLXByb2ZpbGUt/aWNvbi1mcm9udC1z/aWRlXzE4NzI5OS0z/OTU5Ni5qcGc_c2l6/ZT02MjYmZXh0PWpw/Zw"
                  }
                  alt={post.title}
                  className="w-full h-48 object-cover"
                />
              </div>

              <div className="px-6 py-4 bg-gray-50 flex justify-between items-center">
                <div
                  className="flex items-center text-gray-600 cursor-pointer"
                  onClick={() => handleLikeToggle(post._id)}
                >
                  <Heart
                    className={`w-5 h-5 mr-1 ${
                      post.likes.includes(currentUserId || "")
                        ? "text-red-500"
                        : ""
                    }`}
                  />
                  <span>{post.likes.length}</span>
                </div>

                <div className="flex items-center text-gray-600 cursor-pointer">
                  <MessageCircle className="w-5 h-5 mr-1" />
                  <span>{post.comments.length}</span>
                </div>
              </div>
            </div>
          ))}
        </div>

        <div className="lg:w-1/3">
          <Suggestusr />
        </div>
      </div>
    </div>
  );
};

export default AllPost;
